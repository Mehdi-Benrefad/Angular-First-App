1- setup latest version of nodejs => [npm install -g npm@latest]

2- install angilar cli => [npm install -g @angular/cli]

3- creer un projet => [ng new mon-premier-projet] OR [ng new mon-projet-angular --style=scss --skip-tests=true]

4- lancer le serveur de developpement => [ng serve]

5- installer Bootstrap [npm install bootstrap@3.3.7 --save]

6- installer le package rxjs [npm install rxjs-compat --save]

7- on ajoute bootstrap a angular.json  archythect>styles> "./node_modules/bootstrap/dist/css/bootstrap.css",

8- le dossier app (Ce dossier contient le module principal de l'application et les trois fichiers du component principal  AppComponent  :
 son template en HTML, sa feuille de styles en SCSS, et son fichier TypeScript, qui contiendra sa logique.)

9-app.component.ts  (Ici, à l'intérieur du décorateur  @Component()  , vous trouvez un objet qui contient les éléments suivants :
    selector  : il s'agit du nom qu'on utilisera comme balise HTML pour afficher ce component, comme vous l'avez vu avec  <app-root>  .
    Ce nom doit être unique et ne doit pas être un nom réservé HTML de type  <div>  ,  <body>  etc. On utilisera donc très souvent un
    préfixe comme  app  , par exemple ; templateUrl  : le chemin vers le code HTML à injecter ; styleUrls  : un array contenant un ou
    plusieurs chemins vers les feuilles de styles qui concernent ce component ;)

10- creons notre premier component => [ng generate component mon-premier].

*****************************************************************************************************************************************
11- Gerer les donnees dynamiques:

11-1- on cree notre component appareil [ng g c appareil]
    on utilise la classe bootstrap [li.list-group-item]

11-2- grace a l'interpolation on affiche le nom de l'appareil dynamiquement:
        dans appareil.component.ts on cree une variable appareilname,
        dans appareil.component.html on fait appel a cette variable {{appareilName}}

11-2- property binding (on utilise les crochet pour lier un attribut a une valiable)
        Avec le string interpolation et le property binding, vous savez communiquer depuis votre code TypeScript vers le template HTML.
        Maintenant, je vais vous montrer comment réagir dans votre code TypeScript aux événements venant du template HTML.
        Actuellement, vous avez un bouton sur votre template qui s'active au bout de 4 secondes.  Vous allez maintenant lui ajouter une
        fonctionnalité liée à l'événement "click" (déclenché quand l'utilisateur clique dessus)

        *on cree un bouton qui v etre desactive car la varuable is auth est egale a false
        *on cree un timeout a l'interieur du constructeur qui v nous permettre d'activer le bouton dans 4 secondes.

11-3- Event Binding: (reagir dans le coode typescript a partir des evenements venant du template),(on utilise les parentheses pour se
        lier a un evenement.).
        on ajout au bouton un evenement au click, et on tui associe une fonction, qui elle meme sera declaree dan le fichier TypeScript.

11-4- Two ways Binding:(C'est une sorte de liaisons des deux sens),(donc on utilise les parentheses et les crochets)
        * Dans "app.module.ts" importe ajoute le form modules, et on l'ajoute dans la liste des imports. (import { FormsModule } from '@angular/forms';)
        * On va ajouter un input, qui va contenir le nom de l'appareil et quand on change le nom dans l'input le nom de la variable change,
        ce qui implique le chamgement de la valeur du label. Tous cela via la proprietes ngmodel.
        [<input type="text" class="form-control" [(ngModel)]="appareilName">]

11-5- Les Proprietes personnalisees:
        On peut paire communiquer les composants entre eux, et laisser passer une information du composant pere au composant fils,
        Dans notre exemple le nom de l'appareil. pour ce faire o doit:
        * importer input.
        * utiliser le decorateur @Input() [@Input() appareilName: string;]
        * affecter le nom de l'appareil a partir du composant pere
        /!\ Or tous cela n'est tres dynamique il est preferable de passer les donnees a partir de typescripte a la place du tag HTML.
        ** on cree nos variables dans le fichier app,component.très
        ** on y accede via les crochets (*^) " [appareilName]="nom de la variable" "

        =>On fait la meme chose pour l'etat de l'appareil


*****************************************************************************************************************************************

12- Structurer le document avec des directives:
        Les directives sont des instructions intégrées dans le DOM que vous utiliserez presque systématiquement quand vous créerez des
        applications Angular.  Quand Angular lit votre template et rencontre une directive qu'il reconnait, il suit les instructions
        correspondantes.  Vous pouvez créer vos propres directives, mais dans le cadre de ce cours, nous allons uniquement aborder
        certaines directives qui sont fournies avec Angular et qui sont extrêmement utiles.
        Il existe deux types principaux de directive :
        * les directives structurelles
        &&
        * les directives par attribut.

12-1- les directives structurelles:
Ce sont des directives qui, comme leur nom l'indique, modifient la structure du document.  Dans ce
chapitre, vous allez en découvrir deux (il en existe d'autres) :  *ngIf  , pour afficher des données de façon conditionnelle, et  *ngFor
, pour itérer des données dans un array, par exemple.

        * (*ngif) Dans notre exemple on va ajouter un carre rouge qui ne va s'afficher que si l'appareil est etteint (*ngif)
                [<div style="width:20px;height:20px;background-color:red;"
                        *ngIf="appareilStatus === 'éteint'"></div>]

        * (*ngfor) on va afficher les 3 appareils dynamiquement:
                ** on remplace la declaration des 3 variables par la declaration d'un seul tableau d'objets.
                ** dans le fichier html on remplace les 3 balise app-appareil en une seule geree avec la directive (*ngfor)
                [
                        <app-appareil  *ngFor="let appareil of appareils"
                        [appareilName]="appareil.name"
                        [appareilStatus]="appareil.status"></app-appareil>
                ]

12-2- les directives par attribut:
À la différence des directives structurelles, les directives par attribut modifient le comportement d'un objet déjà existant.  Vous avez
déjà utilisé une directive de ce type sans le savoir : la directive  ngModel  que vous avez employée pour le two-way binding, qui modifie
la valeur du  <input>  et répond à tout changement qu'on lui apporte.  Je vais vous montrer deux autres exemples très utiles :  ngStyle
et  ngClass , qui permettent d'attribuer des styles ou des classes de manière dynamique.

        *(ngstyle) Cette directive permet d'appliquer des styles à un objet du DOM de manière dynamique. Imaginez que, pour l'application
        des appareils électriques, vous souhaitiez modifier la couleur du texte selon si l'appareil est allumé ou non, disons vert pour
        allumé, rouge pour éteint.   ngStyle  vous permet de faire cela :

        ** on ajoute la directive "ngstyle" dans la balise <h4></h4>
                [
                        <h4 [ngStyle]="{color: getColor()}">Appareil : {{ appareilName }} -- Statut : {{ getStatus() }}</h4>
                ]
        ** on cree une fonction getcolor qui vq retourner la couleur en fonction de l'etat de la machine
                [
                        getColor() {
                                if(this.appareilStatus === 'allume') {
                                        return 'green';
                                } else if(this.appareilStatus === 'eteint') {
                                        return 'red';
                                }
                                return 'black'
                        }
                ]



        *(ngclass) Au-delà de modifier des styles directement, il peut être très utile d'ajouter des classes CSS à un élément de manière
        dynamique.  Comme  ngStyle ,  ngClass  prend un objet clé-valeur, mais cette fois avec la classe à appliquer en clé, et la
        condition en valeur.
        => Pour cet exemple, on va appliquer des classes Bootstrap à la balise  <li>  en fonction du statut de l'appareil :
        [
                <li [ngClass]="{'list-group-item': true,
                'list-group-item-success': appareilStatus === 'allume',
                'list-group-item-danger': appareilStatus === 'eteint'}">
        ]


******************************************************************************************************************************************
13-Modifiez les données en temps réel avec les Pipes
  Un pipe que l'on utilise très souvent est DatePipe , qui analyse des objets JS de type Date et qui les affiche d'une manière plus
  lisible que leur encodage de base.  Par exemple, imaginez que vous vouliez ajouter la date de la dernière mise à jour dans votre
  application des appareils électriques.  Commencez par créer cet objet dans  AppComponent  et par l'afficher directement dans le
  template :

        *on ajoute la date de la derniere modification comme variable dans appComponent [lastUpdate = new Date();]
        *puis on lui fait appel via les pipes
              [
                <h3>sans pipes</h3>
                <p>Mis à jour : {{ lastUpdate }}</p>
                <h3>avec pipes</h3>
                <p>Mis à jour : {{ lastUpdate | date }}</p>
                <!--ou bien-->
                <p>Mis à jour : {{ lastUpdate | date: 'short' }}</p>
                <!--ou bien-->
                <p>Mis à jour : {{ lastUpdate | date: 'yMMMMEEEEd' }}</p>
                <!--Chaine de pipes-->
                <h3>Chaine de pipes (formatage+Maj)</h3>
                <p>Mis à jour : {{ lastUpdate | date: 'yMMMMEEEEd' | uppercase }}</p>
              ]

13-2- Le pipe Async:
Le pipe  async  est un cas particulier mais extrêmement utile dans les applications Web, car il permet de gérer des données asynchrones,
par exemple des données que l'application doit récupérer sur un serveur.  Dans les chapitres suivants, nous apprendrons à communiquer avec
un serveur extérieur, mais pour l'instant, nous allons simuler ce comportement en créant une Promise qui va se résoudre au bout de
quelques secondes.  Modifions  lastUpdate  comme suit :
  **
  [
    lastUpdate: Promise<Date> = new Promise((resolve, reject) => {
      const date = new Date();
      setTimeout(
        () => {
          resolve(date);
        }, 2000
      );
    });
  ]

  **et on fait l'appal avec le pipe (async)
  [
          <p>Mis à jour : {{ lastUpdate | async | date: 'yMMMMEEEEd' | uppercase }}</p>

  ]


*****************************************************************************************************************************************\
14- Améliorez la structure du code avec les Services
  Dit très simplement, un service permet de centraliser des parties de votre code et des données qui sont utilisées par plusieurs parties
  de votre application ou de manière globale par l'application entière.  Les services permettent donc :
  de ne pas avoir le même code doublé ou triplé à différents niveaux de l'application - ça facilite donc la maintenance, la lisibilité et
  la stabilité du code ;
  de ne pas copier inutilement des données - si tout est centralisé, chaque partie de l'application aura accès aux mêmes informations,
  évitant beaucoup d'erreurs potentielles.

14-1- Créez maintenant un sous-dossier  services  dans  app , et créez-y un nouveau fichier appelé  appareil.service.ts

14-2-injecter ce service dans  AppModule  en l'ajoutant à l'array  providers

14-3- Angular crée maintenant une instance du service  AppareilService  pour l'application entière.  Pour l'intégrer dans un component,
on le déclare comme argument dans son constructeur.  Intégrons-le dans  AppComponent

14-4- On retire la declaration des appareils et on la met dans le service.

14-5- dans  AppComponent , déclarons  appareils  simplement comme un array de type  any.

15-6-Il faut maintenant que  AppComponent  puisse récupérer les informations stockées dans  AppareilService .  Pour cela, vous allez
implémenter la méthode  ngOnInit()
  ** dans la déclaration de classe  AppComponent , nous allons implémenter l'interface  OnInit
  ** récupérer les informations depuis  AppareilService  dans la méthode  ngOnInit() (généralement on la place après le constructeur et
     avant les autres méthodes du component) :

15-7- nous allons pouvoir créer deux nouvelles méthodes :  switchOnAll()  et  switchOffAll()  pour allumer ou éteindre tous les appareils
d'un coup.

  ** Commencons par préparer ces méthodes dans  AppareilService:
    [
        switchOnAll() {
            for(let appareil of this.appareils) {
              appareil.status = 'allumé';
            }
        }

        switchOffAll() {
            for(let appareil of this.appareils) {
              appareil.status = 'éteint';
            }
        }
    ]

  ** On ajoute 2 boutons dans le template de  AppComponent
  [
    <button class="btn btn-success"
              [disabled]="!isAuth"
              (click)="onAllumer()">Tout allumer</button>
    <button class="btn btn-danger"
              [disabled]="!isAuth"
              (click)="onEteindre()">Tout éteindre</button>
  ]

  ** Enfin, il ne nous reste plus qu'à capturer les événements  click  dans  AppComponent  pour ensuite déclencher les méthodes dans
  AppareilService:

  /(Dans app.components.ts)
  [

    onAllumer() {
      this.appareilService.switchOnAll();
    }


    onEteindre() {
        if(confirm('Etes-vous sûr de vouloir éteindre tous vos appareils ?')) {
          this.appareilService.switchOffAll();
        } else {
          return null;
        }
    }

  ]


15-8- *** Maintenant on va creer de methodes pour allumer ou eteindre un seul appareil ***

  **Dans un premier temps, il faudra que chaque instance de  AppareilComponent  puisse dire à  AppareilService  à quel membre de l'array
    reils  elle correspond.  Heureusement, Angular nous permet de faire ça facilement.
    Dans la directive  *ngFor , ajoutez :  let i = index"

    [
      <ul class="list-group">
          <app-appareil  *ngFor="let appareil of appareils; let i = index"
                        [appareilName]="appareil.name"
                        [appareilStatus]="appareil.status"
                        [index]="i"></app-appareil>
      </ul>
    ]

  ** Dans  AppareilService , vous allez maintenant créer les méthodes permettant d'allumer ou d'éteindre un seul appareil en fonction de
    son index dans l'array  appareils  :
    [
      switchOnOne(i: number) {
          this.appareils[i].status = 'allumé';
      }


      switchOffOne(i: number) {
          this.appareils[i].status = 'éteint';
      }
    ]

  ** Ensuite, dans  AppareilComponent , vous allez d'abord intégrer le service  AppareilService, en l'important en haut du fichier comme
    toujours :
    [
      constructor(private appareilService: AppareilService) { }
    ]

  ** Puis vous allez préparer la méthode qui, en fonction du statut actuel de l'appareil, l'allumera ou l'éteindra :
    [
      onSwitch() {
          if(this.appareilStatus === 'allumé') {
            this.appareilService.switchOffOne(this.index);
          } else if(this.appareilStatus === 'éteint') {
            this.appareilService.switchOnOne(this.index);
          }
      }
    ]

*****************************************************************************************************************************************

16- Gérez la navigation avec le Routing

16-1 preparer l'application pour le routing:

    ** on cree un nouveau components[ng g c auth]

    **Vous allez également devoir modifier un peu l'organisation actuelle afin d'intégrer plus facilement le routing : vous allez créer
    un component qui contiendra toute la view actuelle et qui s'appellera  AppareilViewComponent  :
    [ng g c appareil-view]

    ** Ensuite, coupez tout le contenu de la colonne dans  app.component.html , enregistrez-le dans  appareil-view.component.html , et
    remplacez-le par la nouvelle balise  <app-appareil-view>  :
    [

    ]

    ** Il faudra également déménager la logique de cette view pour que tout re-marche : injectez  AppareilService , créez l'array
    appareils , intégrez la logique  ngOnInit  et déplacez les fonctions  onAllumer()  et  onEteindre()  :

    [


    ]

  ** on ajoute un barre de navigation a AppComponent avec (routerLink a la place de href)

16-2- Dand (app.module.ts)
** On crée une constante de type  Routes  (qu'on importe depuis  @angular/router ) qui est un array d'objets JS
    qui prennent une certaine forme :
    [
      import { Routes } from '@angular/router';

      const appRoutes: Routes = [
        { path: 'appareils', component: AppareilViewComponent },
        { path: 'auth', component: AuthComponent },
        { path: '', component: AppareilViewComponent }
      ];
    ]
** Les routes sont maintenant créées, mais il faut les enregistrer dans votre application.  Pour cela, vous allez importer  RouterModule
    depuis  @angular/router  et vous allez l'ajouter à l'array imports de votre  AppModule , tout en lui appelant la méthode  forRoot()  en
    lui passant l'array de routes que vous venez de créer :
    [
      imports: [
          BrowserModule,
          FormsModule,
          RouterModule.forRoot(appRoutes)
      ],
    ]

** Dans app.component.html : on remplace <app-appareil-view>  par  <router-outlet></router-outlet>



16-3- On va maintenant illustrer l'authentification:

  **Tout d'abord, créez un nouveau fichier  auth.service.ts  dans le dossier services pour gérer l'authentification (n'oubliez pas de
  l'ajouter également dans l'array  providers  dans  AppModule ) :

  **on ajoute appservice dans appmodule
    [
        providers: [
          AppareilService,
          AuthService
        ],
    ]



  **on cree une variable [AuthStatus:boolean = false;] dans auth_component

  ** on cree 2 m2thodes onSignIn et onSignOut

  ** On cree une template por auth
  [

        <h2>Authentification</h2>
    <button class="btn btn-success" *ngIf="!authStatus" (click)="onSignIn()">Se connecter</button>
    <button class="btn btn-danger" *ngIf="authStatus" (click)="onSignOut()">Se déconnecter</button>


  ]
