1- setup latest version of nodejs => [npm install -g npm@latest]

2- install angilar cli => [npm install -g @angular/cli]

3- creer un projet => [ng new mon-premier-projet] OR [ng new mon-projet-angular --style=scss --skip-tests=true]

4- lancer le serveur de developpement => [ng serve]

5- installer Bootstrap [npm install bootstrap@3.3.7 --save]

6- installer le package rxjs [npm install rxjs-compat --save]

7- on ajoute bootstrap a angular.json  archythect>styles> "./node_modules/bootstrap/dist/css/bootstrap.css",

8- le dossier app (Ce dossier contient le module principal de l'application et les trois fichiers du component principal  AppComponent  :
 son template en HTML, sa feuille de styles en SCSS, et son fichier TypeScript, qui contiendra sa logique.)

9-app.component.ts  (Ici, à l'intérieur du décorateur  @Component()  , vous trouvez un objet qui contient les éléments suivants :
    selector  : il s'agit du nom qu'on utilisera comme balise HTML pour afficher ce component, comme vous l'avez vu avec  <app-root>  .
    Ce nom doit être unique et ne doit pas être un nom réservé HTML de type  <div>  ,  <body>  etc. On utilisera donc très souvent un
    préfixe comme  app  , par exemple ; templateUrl  : le chemin vers le code HTML à injecter ; styleUrls  : un array contenant un ou
    plusieurs chemins vers les feuilles de styles qui concernent ce component ;)

10- creons notre premier component => [ng generate component mon-premier].

*****************************************************************************************************************************************
11- Gerer les donnees dynamiques:

11-1- on cree notre component appareil [ng g c appareil]
    on utilise la classe bootstrap [li.list-group-item]

11-2- grace a l'interpolation on affiche le nom de l'appareil dynamiquement:
        dans appareil.component.ts on cree une variable appareilname,
        dans appareil.component.html on fait appel a cette variable {{appareilName}}

11-2- property binding (on utilise les crochet pour lier un attribut a une valiable)
        Avec le string interpolation et le property binding, vous savez communiquer depuis votre code TypeScript vers le template HTML.
        Maintenant, je vais vous montrer comment réagir dans votre code TypeScript aux événements venant du template HTML.
        Actuellement, vous avez un bouton sur votre template qui s'active au bout de 4 secondes.  Vous allez maintenant lui ajouter une
        fonctionnalité liée à l'événement "click" (déclenché quand l'utilisateur clique dessus)

        *on cree un bouton qui v etre desactive car la varuable is auth est egale a false
        *on cree un timeout a l'interieur du constructeur qui v nous permettre d'activer le bouton dans 4 secondes.

11-3- Event Binding: (reagir dans le coode typescript a partir des evenements venant du template),(on utilise les parentheses pour se
        lier a un evenement.).
        on ajout au bouton un evenement au click, et on tui associe une fonction, qui elle meme sera declaree dan le fichier TypeScript.

11-4- Two ways Binding:(C'est une sorte de liaisons des deux sens),(donc on utilise les parentheses et les crochets)
        * Dans "app.module.ts" importe ajoute le form modules, et on l'ajoute dans la liste des imports. (import { FormsModule } from '@angular/forms';)
        * On va ajouter un input, qui va contenir le nom de l'appareil et quand on change le nom dans l'input le nom de la variable change,
        ce qui implique le chamgement de la valeur du label. Tous cela via la proprietes ngmodel.
        [<input type="text" class="form-control" [(ngModel)]="appareilName">]

11-5- Les Proprietes personnalisees:
        On peut paire communiquer les composants entre eux, et laisser passer une information du composant pere au composant fils,
        Dans notre exemple le nom de l'appareil. pour ce faire o doit:
        * importer input.
        * utiliser le decorateur @Input() [@Input() appareilName: string;]
        * affecter le nom de l'appareil a partir du composant pere
        /!\ Or tous cela n'est tres dynamique il est preferable de passer les donnees a partir de typescripte a la place du tag HTML.
        ** on cree nos variables dans le fichier app,component.très
        ** on y accede via les crochets (*^) " [appareilName]="nom de la variable" "

        =>On fait la meme chose pour l'etat de l'appareil


*****************************************************************************************************************************************

12- Structurer le document avec des directives:
        Les directives sont des instructions intégrées dans le DOM que vous utiliserez presque systématiquement quand vous créerez des
        applications Angular.  Quand Angular lit votre template et rencontre une directive qu'il reconnait, il suit les instructions
        correspondantes.  Vous pouvez créer vos propres directives, mais dans le cadre de ce cours, nous allons uniquement aborder
        certaines directives qui sont fournies avec Angular et qui sont extrêmement utiles.
        Il existe deux types principaux de directive :
        * les directives structurelles
        &&
        * les directives par attribut.

12-1- les directives structurelles:
Ce sont des directives qui, comme leur nom l'indique, modifient la structure du document.  Dans ce
chapitre, vous allez en découvrir deux (il en existe d'autres) :  *ngIf  , pour afficher des données de façon conditionnelle, et  *ngFor
, pour itérer des données dans un array, par exemple.

        * (*ngif) Dans notre exemple on va ajouter un carre rouge qui ne va s'afficher que si l'appareil est etteint (*ngif)
                [<div style="width:20px;height:20px;background-color:red;"
                        *ngIf="appareilStatus === 'éteint'"></div>]

        * (*ngfor) on va afficher les 3 appareils dynamiquement:
                ** on remplace la declaration des 3 variables par la declaration d'un seul tableau d'objets.
                ** dans le fichier html on remplace les 3 balise app-appareil en une seule geree avec la directive (*ngfor)
                [
                        <app-appareil  *ngFor="let appareil of appareils"
                        [appareilName]="appareil.name"
                        [appareilStatus]="appareil.status"></app-appareil>
                ]

12-2- les directives par attribut:
À la différence des directives structurelles, les directives par attribut modifient le comportement d'un objet déjà existant.  Vous avez
déjà utilisé une directive de ce type sans le savoir : la directive  ngModel  que vous avez employée pour le two-way binding, qui modifie
la valeur du  <input>  et répond à tout changement qu'on lui apporte.  Je vais vous montrer deux autres exemples très utiles :  ngStyle
et  ngClass , qui permettent d'attribuer des styles ou des classes de manière dynamique.

        *(ngstyle) Cette directive permet d'appliquer des styles à un objet du DOM de manière dynamique. Imaginez que, pour l'application
        des appareils électriques, vous souhaitiez modifier la couleur du texte selon si l'appareil est allumé ou non, disons vert pour
        allumé, rouge pour éteint.   ngStyle  vous permet de faire cela :

        ** on ajoute la directive "ngstyle" dans la balise <h4></h4>
                [
                        <h4 [ngStyle]="{color: getColor()}">Appareil : {{ appareilName }} -- Statut : {{ getStatus() }}</h4>
                ]
        ** on cree une fonction getcolor qui vq retourner la couleur en fonction de l'etat de la machine
                [
                        getColor() {
                                if(this.appareilStatus === 'allume') {
                                        return 'green';
                                } else if(this.appareilStatus === 'eteint') {
                                        return 'red';
                                }
                                return 'black'
                        }
                ]



        *(ngclass) Au-delà de modifier des styles directement, il peut être très utile d'ajouter des classes CSS à un élément de manière
        dynamique.  Comme  ngStyle ,  ngClass  prend un objet clé-valeur, mais cette fois avec la classe à appliquer en clé, et la
        condition en valeur.
        => Pour cet exemple, on va appliquer des classes Bootstrap à la balise  <li>  en fonction du statut de l'appareil :
        [
                <li [ngClass]="{'list-group-item': true,
                'list-group-item-success': appareilStatus === 'allume',
                'list-group-item-danger': appareilStatus === 'eteint'}">
        ]


******************************************************************************************************************************************
13-Modifiez les données en temps réel avec les Pipes
  Un pipe que l'on utilise très souvent est DatePipe , qui analyse des objets JS de type Date et qui les affiche d'une manière plus
  lisible que leur encodage de base.  Par exemple, imaginez que vous vouliez ajouter la date de la dernière mise à jour dans votre
  application des appareils électriques.  Commencez par créer cet objet dans  AppComponent  et par l'afficher directement dans le
  template :

        *on ajoute la date de la derniere modification comme variable dans appComponent [lastUpdate = new Date();]
        *puis on lui fait appel via les pipes
              [
                <h3>sans pipes</h3>
                <p>Mis à jour : {{ lastUpdate }}</p>
                <h3>avec pipes</h3>
                <p>Mis à jour : {{ lastUpdate | date }}</p>
                <!--ou bien-->
                <p>Mis à jour : {{ lastUpdate | date: 'short' }}</p>
                <!--ou bien-->
                <p>Mis à jour : {{ lastUpdate | date: 'yMMMMEEEEd' }}</p>
                <!--Chaine de pipes-->
                <h3>Chaine de pipes (formatage+Maj)</h3>
                <p>Mis à jour : {{ lastUpdate | date: 'yMMMMEEEEd' | uppercase }}</p>
              ]

13-2- Le pipe Async:
Le pipe  async  est un cas particulier mais extrêmement utile dans les applications Web, car il permet de gérer des données asynchrones,
par exemple des données que l'application doit récupérer sur un serveur.  Dans les chapitres suivants, nous apprendrons à communiquer avec
un serveur extérieur, mais pour l'instant, nous allons simuler ce comportement en créant une Promise qui va se résoudre au bout de
quelques secondes.  Modifions  lastUpdate  comme suit :
  **
  [
    lastUpdate: Promise<Date> = new Promise((resolve, reject) => {
      const date = new Date();
      setTimeout(
        () => {
          resolve(date);
        }, 2000
      );
    });
  ]

  **et on fait l'appal avec le pipe (async)
  [
          <p>Mis à jour : {{ lastUpdate | async | date: 'yMMMMEEEEd' | uppercase }}</p>

  ]


*****************************************************************************************************************************************\
14- Améliorez la structure du code avec les Services
  Dit très simplement, un service permet de centraliser des parties de votre code et des données qui sont utilisées par plusieurs parties
  de votre application ou de manière globale par l'application entière.  Les services permettent donc :
  de ne pas avoir le même code doublé ou triplé à différents niveaux de l'application - ça facilite donc la maintenance, la lisibilité et
  la stabilité du code ;
  de ne pas copier inutilement des données - si tout est centralisé, chaque partie de l'application aura accès aux mêmes informations,
  évitant beaucoup d'erreurs potentielles.

14-1- Créez maintenant un sous-dossier  services  dans  app , et créez-y un nouveau fichier appelé  appareil.service.ts

14-2-injecter ce service dans  AppModule  en l'ajoutant à l'array  providers

14-3- Angular crée maintenant une instance du service  AppareilService  pour l'application entière.  Pour l'intégrer dans un component,
on le déclare comme argument dans son constructeur.  Intégrons-le dans  AppComponent

14-4- On retire la declaration des appareils et on la met dans le service.

14-5- dans  AppComponent , déclarons  appareils  simplement comme un array de type  any.

15-6-Il faut maintenant que  AppComponent  puisse récupérer les informations stockées dans  AppareilService .  Pour cela, vous allez
implémenter la méthode  ngOnInit()
  ** dans la déclaration de classe  AppComponent , nous allons implémenter l'interface  OnInit
  ** récupérer les informations depuis  AppareilService  dans la méthode  ngOnInit() (généralement on la place après le constructeur et
     avant les autres méthodes du component) :

15-7- nous allons pouvoir créer deux nouvelles méthodes :  switchOnAll()  et  switchOffAll()  pour allumer ou éteindre tous les appareils
d'un coup.

  ** Commencons par préparer ces méthodes dans  AppareilService:
    [
        switchOnAll() {
            for(let appareil of this.appareils) {
              appareil.status = 'allumé';
            }
        }

        switchOffAll() {
            for(let appareil of this.appareils) {
              appareil.status = 'éteint';
            }
        }
    ]

  ** On ajoute 2 boutons dans le template de  AppComponent
  [
    <button class="btn btn-success"
              [disabled]="!isAuth"
              (click)="onAllumer()">Tout allumer</button>
    <button class="btn btn-danger"
              [disabled]="!isAuth"
              (click)="onEteindre()">Tout éteindre</button>
  ]

  ** Enfin, il ne nous reste plus qu'à capturer les événements  click  dans  AppComponent  pour ensuite déclencher les méthodes dans
  AppareilService:

  /(Dans app.components.ts)
  [

    onAllumer() {
      this.appareilService.switchOnAll();
    }


    onEteindre() {
        if(confirm('Etes-vous sûr de vouloir éteindre tous vos appareils ?')) {
          this.appareilService.switchOffAll();
        } else {
          return null;
        }
    }

  ]


15-8- *** Maintenant on va creer de methodes pour allumer ou eteindre un seul appareil ***

  **Dans un premier temps, il faudra que chaque instance de  AppareilComponent  puisse dire à  AppareilService  à quel membre de l'array
    reils  elle correspond.  Heureusement, Angular nous permet de faire ça facilement.
    Dans la directive  *ngFor , ajoutez :  let i = index"

    [
      <ul class="list-group">
          <app-appareil  *ngFor="let appareil of appareils; let i = index"
                        [appareilName]="appareil.name"
                        [appareilStatus]="appareil.status"
                        [index]="i"></app-appareil>
      </ul>
    ]

  ** Dans  AppareilService , vous allez maintenant créer les méthodes permettant d'allumer ou d'éteindre un seul appareil en fonction de
    son index dans l'array  appareils  :
    [
      switchOnOne(i: number) {
          this.appareils[i].status = 'allumé';
      }


      switchOffOne(i: number) {
          this.appareils[i].status = 'éteint';
      }
    ]

  ** Ensuite, dans  AppareilComponent , vous allez d'abord intégrer le service  AppareilService, en l'important en haut du fichier comme
    toujours :
    [
      constructor(private appareilService: AppareilService) { }
    ]

  ** Puis vous allez préparer la méthode qui, en fonction du statut actuel de l'appareil, l'allumera ou l'éteindra :
    [
      onSwitch() {
          if(this.appareilStatus === 'allumé') {
            this.appareilService.switchOffOne(this.index);
          } else if(this.appareilStatus === 'éteint') {
            this.appareilService.switchOnOne(this.index);
          }
      }
    ]

*****************************************************************************************************************************************

16- Gérez la navigation avec le Routing

16-1 preparer l'application pour le routing:

    ** on cree un nouveau components[ng g c auth]

    **Vous allez également devoir modifier un peu l'organisation actuelle afin d'intégrer plus facilement le routing : vous allez créer
    un component qui contiendra toute la view actuelle et qui s'appellera  AppareilViewComponent  :
    [ng g c appareil-view]

    ** Ensuite, coupez tout le contenu de la colonne dans  app.component.html , enregistrez-le dans  appareil-view.component.html , et
    remplacez-le par la nouvelle balise  <app-appareil-view>  :
    [

    ]

    ** Il faudra également déménager la logique de cette view pour que tout re-marche : injectez  AppareilService , créez l'array
    appareils , intégrez la logique  ngOnInit  et déplacez les fonctions  onAllumer()  et  onEteindre()  :

    [


    ]

  ** on ajoute un barre de navigation a AppComponent avec (routerLink a la place de href)

16-2- Dand (app.module.ts)
** On crée une constante de type  Routes  (qu'on importe depuis  @angular/router ) qui est un array d'objets JS
    qui prennent une certaine forme :
    [
      import { Routes } from '@angular/router';

      const appRoutes: Routes = [
        { path: 'appareils', component: AppareilViewComponent },
        { path: 'auth', component: AuthComponent },
        { path: '', component: AppareilViewComponent }
      ];
    ]
** Les routes sont maintenant créées, mais il faut les enregistrer dans votre application.  Pour cela, vous allez importer  RouterModule
    depuis  @angular/router  et vous allez l'ajouter à l'array imports de votre  AppModule , tout en lui appelant la méthode  forRoot()  en
    lui passant l'array de routes que vous venez de créer :
    [
      imports: [
          BrowserModule,
          FormsModule,
          RouterModule.forRoot(appRoutes)
      ],
    ]

** Dans app.component.html : on remplace <app-appareil-view>  par  <router-outlet></router-outlet>



16-3- On va maintenant illustrer l'authentification:

  **Tout d'abord, créez un nouveau fichier  auth.service.ts  dans le dossier services pour gérer l'authentification (n'oubliez pas de
  l'ajouter également dans l'array  providers  dans  AppModule ) :

  **on ajoute appservice dans appmodule
    [
        providers: [
          AppareilService,
          AuthService
        ],
    ]



  **on cree une variable [AuthStatus:boolean = false;] dans auth_component

  ** on cree 2 m2thodes onSignIn et onSignOut

  ** On cree une template por auth
  [

        <h2>Authentification</h2>
    <button class="btn btn-success" *ngIf="!authStatus" (click)="onSignIn()">Se connecter</button>
    <button class="btn btn-danger" *ngIf="authStatus" (click)="onSignOut()">Se déconnecter</button>


  ]



  16-4-Paramètres de routes
      Imaginez qu'on souhaite pouvoir cliquer sur un appareil dans la liste d'appareils afin d'afficher une page avec plus d'informations sur
      cet appareil : on peut imaginer un système de routing de type  appareils/nom-de-l'appareil , par exemple.  Si on n'avait que deux ou
      trois appareils, on pourrait être tenté de créer une route par appareil, mais imaginez un cas de figure où l'on aurait 30 appareils, ou
      300.  Imaginez qu'on laisse l'utilisateur créer de nouveaux appareils ; l'approche de créer une route par appareil n'est pas adaptée.
      Dans ce genre de cas, on choisira plutôt de créer une route avec paramètre.

    ** On cree un nouveau component [Single Appareil]
    ** On ajoute un chemin au Router  [{ path: 'appareils/:id', component: SingleAppareilComponent },]
    ** On personnalise le template
    ** On modifie le constructeur [constructor(private appareilService: AppareilService,
            private route: ActivatedRoute) { }]

    ** On recupere l'identifiant [ngOnInit() {
    this.name = this.route.snapshot.params['id'];}]

    ** On ajoute des identifiants aux appareils

    **on cree une fonction qui nous permet de recuperer un appareil par identifiants
    [
        getAppareilById(id: number) {
            const appareil = this.appareils.find(
              (s) => {
                return s.id === id;
              }
            );
            return appareil;
        }
    ]

    ** on personnalise la methode on init

    ngOnInit() {
        const id = this.route.snapshot.params['id'];
        this.name = this.appareilService.getAppareilById(+id).name;
        this.status = this.appareilService.getAppareilById(+id).status;
    }

    ** Et maintenant puisque les routes parametrees fonctionnent il ne nous reste, qu'a passer l'identifiant au composant.
    *** on ajoute une variable id dans notre composant [@Input() id: number;](Dans appareil component)
    *** et on lui affecte un valeur a partir de appareilviewcomponent;
    [[id]="appareil.id"]



  16-5- l peut y avoir des cas de figure où l'on souhaiterait rediriger un utilisateur, par exemple pour afficher une page 404 lorsqu'il entre
    une URL qui n'existe pas.

  ** Creer un component [not-found]
  ** on modifie la routes en ajoutans deux routes:
  [
     { path: 'not-found', component: NotFoundComponent },
        { path: '**', redirectTo: 'not-found' }
  ]


17- Les Guards:
  Il permettent d'empecher certains utilisateurs,d'acceder a des routes (par exemple s'il faut etre authentifie)

  17-1 On cree Unservice qui va jouer le role du guard:(on cree un fichier 'auth-guard.service.ts')

  17-2- On injecte le guard dans les routes qu'on veut proteger

  17-3- on ajoute [AppGuard] dans providers


**********************************************************************************************************************************************

18-Observez les données avec RxJS

  18-1-Les Observables:
    Très simplement, un Observable est un objet qui émet des informations auxquelles on souhaite réagir.  Ces informations peuvent venir d'un
    champ de texte dans lequel l'utilisateur rentre des données, ou de la progression d'un chargement de fichier, par exemple.  Elles peuvent
    également venir de la communication avec un serveur : le client HTTP, que vous verrez dans un chapitre ultérieur, emploie les Observables.

    Dans notre cas on va creer un observable qui observe un counter sur len nombre de secondes depuis la connexion:

    **Pour avoir accès aux Observables et aux méthodes que vous allez utiliser, il faut ajouter deux imports :
    [

      import { Observable } from 'rxjs/Observable';
      import 'rxjs/add/observable/interval';

    ]


    **On implemente l'observabe a l'interieur dans la fonction mgOnInit():
    [
        ngOnInit() {
            const counter = Observable.interval(1000);
            counter.subscribe(
              (value) => {
                this.secondes = value;
              },
              (error) => {
                console.log('Uh-oh, an error occurred! : ' + error);
              },
              () => {
                console.log('Observable complete!');
              }
            );
        }
    ]


    ** On affiche le resultat dans le template:
    [
      <div class="navbar-right">
            <p>Vous êtes connecté depuis {{ secondes }} secondes !</p>
        </div>
    ]



  18-2- Les Subscriptions:
    Afin d'éviter tout problème, quand vous utilisez des Observables personnalisés (surtout quand on boucle infiniment), au lieux d'appliquer
    la methode subscribe() directement au counter il est vivement conseillé de stocker la souscription dans un objet Subscription (à importer
    depuis rxjs/Subscription) , On implemente l'interface OnDestroy, puis on cree une fonction  ngOnDestroy() :
    [
        counterSubscription: Subscription = new Subscription();

       ngOnInit() {
          const counter = Observable.interval(1000);
          this.counterSubscription = counter.subscribe(
            (value) => {
              this.secondes = value;
            },
            (error) => {
              console.log('Uh-oh, an error occurred! : ' + error);
            },
            () => {
              console.log('Observable complete!');
            }
          );
        }

        ngOnDestroy() {
          this.counterSubscription.unsubscribe();
        }
      }


    ]

    /!\ La fonction  unsubscribe()  détruit la souscription et empêche les comportements inattendus liés aux Observables infinis, donc
    n'oubliez pas de unsubscribe !




  18-3- Les subjects: Il existe un type d'Observable qui permet non seulement de réagir à de nouvelles informations, mais également d'en
  émettre.  Imaginez une variable dans un service, par exemple, qui peut être modifié depuis plusieurs components ET qui fera réagir tous les
  components qui y sont liés en même temps.

  Dans notre cas on va ajouter un subject pour ajouter un niveau d'abstraction par rapport aux donnees, ca va nous permettre de mieux
  controller de maniere centralisee les donnees. donc le subject emmetera la liste des appareils lorceque nous lui demanderons de le faire.

  ** On modifie la declaration des liste des appareils en leurs donnat une portee "Private"

  **On cree une variable subject [appareilsSubject = new Subject<any[]>();]

  ** On cree une methode qui va nous permettre de copier la liste des appareils dans le subject:
  [
    emitAppareilSubject() {
      this.appareilsSubject.next(this.appareils.slice());
    }
  ]

  ** on fait appel a cette methode dans tous les autres methodes allumer et ettendre [ this.emitAppareilSubject();]

  ** Dans AppareilViewComponent on effectue des changements pour qu'ils soient compatibles avec le service.

    *** On ajoute une variable [appareilSubscription: Subscription;]
    *** On modifie la methode onInit()
      [
        ngOnInit() {
          this.appareilSubscription = this.appareilService.appareilsSubject.subscribe(
            (appareils: any[]) => {
              this.appareils = appareils;
            }
          );
          this.appareilService.emitAppareilSubject();
        }

      ]



 *********************************************************************************************************************************************

  19- Écoutez l'utilisateur avec les Forms - méthode template.

  19-1- On cree un nouveau component qui permettera a l'utilisateur d'enregistrer un nouveau appareil electrique. [ng g component edit-appareil]

  19-2- On implemente le formulaire. (on donne un name au input et aussi on ajoute ngmodel)

  19-3- On ajoute un chemin dans la route.[{ path: 'edit', canActivate: [AuthGuard], component: EditAppareilComponent },]

  19-4- on recupere le contenu du formulaire a l'aide d'une reference #f a l'interieur d'une fonction declaree a l'interieur du composant.

  19-5- On peut definir l'appareil par defaut eteint, pour cela on doit se lier au ngmodel ([]) , en le liant avec une variable declaree dans
  le fichier typescript.

  19-5- on ajoute une methode dans appareil service qui va nous permettre d'ajouter un nouvel appareil.

  [

    addAppareil(name: string, status: string) {
        const appareilObject = {
          id: 0,
          name: '',
          status: ''
        };
        appareilObject.name = name;
        appareilObject.status = status;
        appareilObject.id = this.appareils[(this.appareils.length - 1)].id + 1;
        this.appareils.push(appareilObject);
        this.emitAppareilSubject();
    }

  ]

  19-6- On modifie le constructeur en lui injectant des parametres [private appareilService: AppareilService,
              private router: Router]

  19-7- on modifie l methode onSubmitt()
  [
      onSubmit(form: NgForm) {
    const name = form.value['name'];
    const status = form.value['status'];
    this.appareilService.addAppareil(name, status);
    this.router.navigate(['/appareils']);
  }
  ]


**********************************************************************************************************************************************
20- Écoutez l'utilisateur avec les Forms - méthode réactive
  Pour illustrer la méthode réactive, nous allons créer une nouvelle section dans l'application des appareils électriques : nous allons
  permettre aux utilisateurs de créer un profil utilisateur simple.  Cette démonstration utilisera des compétences que nous avons apprises
  tout au long de ce cours, et vous allez également créer votre premier modèle de données sous forme d'une classe TypeScript.

  ** On cree un nouveau dossier "Modeles"
  ** Dans le dossier Models on cree un fichier "User.model.ts"
  ** On cree un nouveau service "UserService"
  ** On ajoute ce service au tableau prooviders de appModule
  ** On cree un nouveau composant UserList
  ** On personnalise la template avec des directives pour afficher la liste des utilisateurs.
  ** On ajoute un chemin vers le composant users-list [{ path: 'users', component: UserListComponent },]
  ** On rajoute le chemin dans la barre de navigation. [<li routerLinkActive="active"><a routerLink="users">Utilisateurs</a></li>]
  ** Dernière étape : il faut ajouter  ReactiveFormsModule , importé depuis  @angular/forms , à l'array  imports  de  AppModule.

  21- Construire un formulaire avec FormBuilder:
  Dans la méthode template, l'objet formulaire mis à disposition par Angular était de type  NgForm , mais ce n'est pas le cas pour les
  formulaires réactifs.  Un formulaire réactif est de type  FormGroup , et il regroupe plusieurs  FormControl  (tous les deux importés depuis
  @angular/forms ).  commoncons d'abord, donc, par créer l'objet dans notre nouveau component  NewUserComponent  :

  ** On cree un nouveau component NewUserComponent[ng g c new-user]
  ** On implemente le formulaire reactif dans ce component : NewUserComponent .
  ** On cree une route bers ce component a partir de userList : [<a routerLink="/new-user">Nouvel utilisateur</a>]
  ** On ajoute un chemin vers new User.

  ** et puis on implemente le fichier typescript du component:
    *** On cree une variable UserForm de type "FormGroup" qui va etre initialisee a l'aide d'un composant form builder.
    *** On cree 2 methodes une pour initioaliser le form builder et une autre pour effectuer un traitement au submit du formulaire,
    [
      initForm() {
        this.userForm = this.formBuilder.group({
          firstName: '',
          lastName: '',
          email: '',
          drinkPreference: ''
        });
      }

      **************************************
      onSubmitForm() {
        const formValue = this.userForm.value;
        const newUser = new User(
          formValue['firstName'],
          formValue['lastName'],
          formValue['email'],
          formValue['drinkPreference']
        );
        this.userService.addUser(newUser);
        this.router.navigate(['/users']);
      }

    ]




  22- Validators:
  Pour ajouter la validation, nous allons modifier légèrement notre exécution de  FormBuilder.group  :
  [

    initForm() {
        this.userForm = this.formBuilder.group({
          firstName: ['', Validators.required],
          lastName: ['', Validators.required],
          email: ['', [Validators.required, Validators.email]],
          drinkPreference: ['', Validators.required]
        });
    }

  ]


  * Puis on rajoute cette directive au boutton de soumission du formulaire [[disabled]="userForm.invalid"]






  23- Ajoutez dynamiquement des FormControl:
    Dans notre cas on souhaite donner a l'utilisateur la possibilite d'inserer le nombre de honies qu'il souhaite pour ce faire on a besoin
    d'utiliser la directive "FormArray", il s'agit d'un tableau de plusieurs "FormControl".

      ** Modifions d'abord  initForm()  pour ajouter un  FormArray  vide qui s'appellera hobbies avec la méthode  array
      [
        initForm() {
            this.userForm = this.formBuilder.group({
              firstName: ['', Validators.required],
              lastName: ['', Validators.required],
              email: ['', [Validators.required, Validators.email]],
              drinkPreference: ['', Validators.required],
              hobbies: this.formBuilder.array([])
            });
        }
      ]

      ** Modifions ensuite  onSubmitForm()  pour récupérer les valeurs, si elles existent (sinon, retournez un array vide) :

      [
        onSubmitForm() {
            const formValue = this.userForm.value;
            const newUser = new User(
              formValue['firstName'],
              formValue['lastName'],
              formValue['email'],
              formValue['drinkPreference'],
              formValue['hobbies'] ? formValue['hobbies'] : []
            );
            this.userService.addUser(newUser);
            this.router.navigate(['/users']);
        }
      ]


      ** On ajoute une methode pour retourner les hobies en format array:
      [
        getHobbies(): FormArray {
            return this.userForm.get('hobbies') as FormArray;
        }
      ]




      ** On ajoute une methode, qui permet d'ajouter un  FormControl  à  hobbies  , permettant ainsi à l'utilisateur d'en ajouter autant qu'il
      veut. :

      [
        onAddHobby() {
            const newHobbyControl = this.formBuilder.control(null, Validators.required);
            this.getHobbies().push(newHobbyControl);
        }
      ]


      ** On ajoute une section au template:
      [
        <div formArrayName="hobbies">
              <h3>Vos hobbies</h3>
              <div class="form-group" *ngFor="let hobbyControl of getHobbies().controls; let i = index">
                <input type="text" class="form-control" [formControlName]="i">
              </div>
              <button type="button" class="btn btn-success" (click)="onAddHobby()">Ajouter un hobby</button>
        </div>
      ]

        *** formArrayName:va nous permettre de relier le contenu du div avec le tableau de hibbies qu'on  declare
        *** let hobbyControl of getHobbies().controls: Ici on recupere les hobbies en utilisant la fonction gethobbies qu'on a cree
        *** Linput contien un attribut qui permet de stoquer l'indice du form control [formControlName].
        *** enfin, nous avons le bouton (de type  button  pour l'empêcher d'essayer de soumettre le formulaire) qui déclenche  onAddHobby() ,
        méthode qui, pour rappel, crée un nouveau  FormControl  (affichant une nouvelle instance de la  <div>  de class  form-group , et donc
        créant une nouvelle  <input> ).




**********************************************************************************************************************************************

23- Interagissez avec un serveur avec HttpClient


23-1- Preparer le Back-End:
    ** Firebase > go to console > new project > project name: (http-client-demo) > realtime database > create database
    ** On doit modifier les regles: [
      {
        "rules": {
          ".read": "true",  // 2021-8-16
          ".write": "true",  // 2021-8-16
        }
      }
    ]

    ** On copie l'url qui va nous permettre d'acceder a notre base de donnees.
    //https://http-client-demo-601ae-default-rtdb.firebaseio.com/


23-2- Envoyer vers le Back-End:

    ** On ajoute "HttpClientModule," aux imports de appModule.
    (sans oublier de l'importer [import { HttpClientModule } from '@angular/common/http';])

    ** nous allo ns utiliser  HttpClient , dans un premier temps, pour la gestion des données de la liste d'appareils.  Vous allez donc
    l'injecter dans  AppareilService , en y ayant auparavant ajouté le décorateur  @Injectable()  (importé depuis  @angular/core):

    ** Nous allons d'abord créer une méthode qui va enregistrer l'array  appareils  dans la base de données au endpoint  /appareils  par la
    méthode POST :

    [
      saveAppareilsToServer() {
          this.httpClient
            .post('https://httpclient-demo.firebaseio.com/appareils.json', this.appareils)
            .subscribe(
              () => {
                console.log('Enregistrement terminé !');
              },
              (error) => {
                console.log('Erreur ! : ' + error);
              }
            );
      }
    ]


  ** Créons maintenant un bouton dans  AppareilViewComponent  qui déclenche cette sauvegarde (en passant, si vous ne l'avez pas encore fait,
  nous pouvons retirer l'activation conditionnelle des boutons "Tout allumer" et "Tout éteindre")

  ** maintenant ajoutons une methode onSave() dans appareilView.

  /!\ Cependant, si nous cliquons plusieurs fois sur ce bouton, Firebase continuera à créer de nouveaux nodes, et dans ce cas de figure,
  ce n'est pas le comportement souhaité. Il faudrait que chaque enregistrement écrase le précédent : pour cela, utilisons plutôt la méthode
  put()  (il n'y a pas besoin de changer les arguments, car les méthodes  put()  et  post()  prennent les deux mêmes premiers arguments)







23-3- Recevoir depuis le Back-End:

  ** on cree une methodequi recupere les appareil du serveurs (Dans le service des appareils)
  [
    getAppareilsFromServer() {
        this.httpClient
          .get<any[]>('https://http-client-demo-601ae-default-rtdb.firebaseio.com/appareils.json')
          .subscribe(
            (response) => {
              this.appareils = response;
              this.emitAppareilSubject();
            },
            (error) => {
              console.log('Erreur ! : ' + error);
            }
          );
    }
  ]


  ** on ajoute un boutton de recuperation au template
      [
        <button class="btn btn-primary"
            (click)="onFetch()">Récupérer les appareils</button>
      ]
  ** on ajoute une methode qui fait appel a la methode de recuperation du service.
    [
      onFetch() {
          this.appareilService.getAppareilsFromServer();
      }
    ]
